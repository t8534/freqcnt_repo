
toggleProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000004ae  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800110  00800110  00000552  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000552  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019c1  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4f  00000000  00000000  000020d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b43  00000000  00000000  00002c24  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f4  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000747  00000000  00000000  00003a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060b  00000000  00000000  000041a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000047ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ea       	ldi	r30, 0xAE	; 174
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 32       	cpi	r26, 0x21	; 33
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <main>
  9e:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <InitWindowTimer>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
  a6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
  aa:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <__data_end+0x1>
  ae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end+0x2>
  b2:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x3>
  b6:	14 bc       	out	0x24, r1	; 36
  b8:	15 bc       	out	0x25, r1	; 37
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	85 bd       	out	0x25, r24	; 37
  be:	16 bc       	out	0x26, r1	; 38
  c0:	ee e6       	ldi	r30, 0x6E	; 110
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	10 82       	st	Z, r1
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <__vector_16>:
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	4f 93       	push	r20
  d8:	5f 93       	push	r21
  da:	6f 93       	push	r22
  dc:	7f 93       	push	r23
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  e2:	af 93       	push	r26
  e4:	bf 93       	push	r27
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
  ee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <t0_WindowOverflowCnt>
  f2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <t0_WindowOverflowCnt+0x1>
  f6:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <t0_WindowOverflowCnt+0x2>
  fa:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <t0_WindowOverflowCnt+0x3>
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	a1 1d       	adc	r26, r1
 102:	b1 1d       	adc	r27, r1
 104:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <t0_WindowOverflowCnt>
 108:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <t0_WindowOverflowCnt+0x1>
 10c:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <t0_WindowOverflowCnt+0x2>
 110:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <t0_WindowOverflowCnt+0x3>
 114:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <t0_WindowOverflowCnt>
 118:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <t0_WindowOverflowCnt+0x1>
 11c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <t0_WindowOverflowCnt+0x2>
 120:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <t0_WindowOverflowCnt+0x3>
 124:	82 31       	cpi	r24, 0x12	; 18
 126:	9a 47       	sbci	r25, 0x7A	; 122
 128:	a1 05       	cpc	r26, r1
 12a:	b1 05       	cpc	r27, r1
 12c:	08 f4       	brcc	.+2      	; 0x130 <__vector_16+0x66>
 12e:	4c c0       	rjmp	.+152    	; 0x1c8 <__vector_16+0xfe>
 130:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <t0_WindowOverflowCnt>
 134:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <t0_WindowOverflowCnt+0x1>
 138:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <t0_WindowOverflowCnt+0x2>
 13c:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <t0_WindowOverflowCnt+0x3>
 140:	f8 94       	cli
 142:	e1 e8       	ldi	r30, 0x81	; 129
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	88 7f       	andi	r24, 0xF8	; 248
 14a:	80 83       	st	Z, r24
 14c:	c4 e8       	ldi	r28, 0x84	; 132
 14e:	d0 e0       	ldi	r29, 0x00	; 0
 150:	48 81       	ld	r20, Y
 152:	59 81       	ldd	r21, Y+1	; 0x01
 154:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <t1_SampleOverflowCnt>
 158:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <t1_SampleOverflowCnt+0x1>
 15c:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <t1_SampleOverflowCnt+0x2>
 160:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <t1_SampleOverflowCnt+0x3>
 164:	dc 01       	movw	r26, r24
 166:	99 27       	eor	r25, r25
 168:	88 27       	eor	r24, r24
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	84 2b       	or	r24, r20
 170:	95 2b       	or	r25, r21
 172:	a6 2b       	or	r26, r22
 174:	b7 2b       	or	r27, r23
 176:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <countedSamplesInWindow>
 17a:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <countedSamplesInWindow+0x1>
 17e:	a0 93 16 01 	sts	0x0116, r26	; 0x800116 <countedSamplesInWindow+0x2>
 182:	b0 93 17 01 	sts	0x0117, r27	; 0x800117 <countedSamplesInWindow+0x3>
 186:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <t1_SampleOverflowCnt>
 18a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <t1_SampleOverflowCnt+0x1>
 18e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <t1_SampleOverflowCnt+0x2>
 192:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <t1_SampleOverflowCnt+0x3>
 196:	19 82       	std	Y+1, r1	; 0x01
 198:	18 82       	st	Y, r1
 19a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 19e:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__data_end+0x1>
 1a2:	a0 91 12 01 	lds	r26, 0x0112	; 0x800112 <__data_end+0x2>
 1a6:	b0 91 13 01 	lds	r27, 0x0113	; 0x800113 <__data_end+0x3>
 1aa:	01 96       	adiw	r24, 0x01	; 1
 1ac:	a1 1d       	adc	r26, r1
 1ae:	b1 1d       	adc	r27, r1
 1b0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 1b4:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <__data_end+0x1>
 1b8:	a0 93 12 01 	sts	0x0112, r26	; 0x800112 <__data_end+0x2>
 1bc:	b0 93 13 01 	sts	0x0113, r27	; 0x800113 <__data_end+0x3>
 1c0:	80 81       	ld	r24, Z
 1c2:	86 60       	ori	r24, 0x06	; 6
 1c4:	80 83       	st	Z, r24
 1c6:	78 94       	sei
 1c8:	ff 91       	pop	r31
 1ca:	ef 91       	pop	r30
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	bf 91       	pop	r27
 1d2:	af 91       	pop	r26
 1d4:	9f 91       	pop	r25
 1d6:	8f 91       	pop	r24
 1d8:	7f 91       	pop	r23
 1da:	6f 91       	pop	r22
 1dc:	5f 91       	pop	r21
 1de:	4f 91       	pop	r20
 1e0:	2f 91       	pop	r18
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <__vector_11>:
 1ec:	1f 92       	push	r1
 1ee:	0f 92       	push	r0
 1f0:	0f b6       	in	r0, 0x3f	; 63
 1f2:	0f 92       	push	r0
 1f4:	11 24       	eor	r1, r1
 1f6:	2f 93       	push	r18
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <t1_SampleOverflowCnt>
 204:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <t1_SampleOverflowCnt+0x1>
 208:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <t1_SampleOverflowCnt+0x2>
 20c:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <t1_SampleOverflowCnt+0x3>
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	a1 1d       	adc	r26, r1
 214:	b1 1d       	adc	r27, r1
 216:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <t1_SampleOverflowCnt>
 21a:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <t1_SampleOverflowCnt+0x1>
 21e:	a0 93 1a 01 	sts	0x011A, r26	; 0x80011a <t1_SampleOverflowCnt+0x2>
 222:	b0 93 1b 01 	sts	0x011B, r27	; 0x80011b <t1_SampleOverflowCnt+0x3>
 226:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <t1_SampleOverflowCnt>
 22a:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <t1_SampleOverflowCnt+0x1>
 22e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <t1_SampleOverflowCnt+0x2>
 232:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <t1_SampleOverflowCnt+0x3>
 236:	8f 3f       	cpi	r24, 0xFF	; 255
 238:	9f 4f       	sbci	r25, 0xFF	; 255
 23a:	af 4f       	sbci	r26, 0xFF	; 255
 23c:	bf 4f       	sbci	r27, 0xFF	; 255
 23e:	41 f4       	brne	.+16     	; 0x250 <__vector_11+0x64>
 240:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <t1_SampleOverflowCnt>
 244:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <t1_SampleOverflowCnt+0x1>
 248:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <t1_SampleOverflowCnt+0x2>
 24c:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <t1_SampleOverflowCnt+0x3>
 250:	bf 91       	pop	r27
 252:	af 91       	pop	r26
 254:	9f 91       	pop	r25
 256:	8f 91       	pop	r24
 258:	2f 91       	pop	r18
 25a:	0f 90       	pop	r0
 25c:	0f be       	out	0x3f, r0	; 63
 25e:	0f 90       	pop	r0
 260:	1f 90       	pop	r1
 262:	18 95       	reti

00000264 <getT1Counts>:
	
}


void getT1Counts(char *buff)
{
 264:	ac 01       	movw	r20, r24
	unsigned long val = 0;

	cli();
 266:	f8 94       	cli
	val = countedSamplesInWindow;
 268:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <countedSamplesInWindow>
 26c:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <countedSamplesInWindow+0x1>
 270:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <countedSamplesInWindow+0x2>
 274:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <countedSamplesInWindow+0x3>
	sei();
 278:	78 94       	sei
 27a:	2a e0       	ldi	r18, 0x0A	; 10
 27c:	0e 94 23 02 	call	0x446	; 0x446 <__ultoa_ncheck>
 280:	08 95       	ret

00000282 <HD44780_write_nibble>:
  if (row > 1) {
    row = 1;
  }

  _delay_ms(5);  //todo: test is it necessary
  HD44780_command(HD44780_SETDDRAMADDR | (col + offsets[row]));
 282:	e1 ee       	ldi	r30, 0xE1	; 225
 284:	f4 e0       	ldi	r31, 0x04	; 4
 286:	31 97       	sbiw	r30, 0x01	; 1
 288:	f1 f7       	brne	.-4      	; 0x286 <HD44780_write_nibble+0x4>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <HD44780_write_nibble+0xa>
 28c:	00 00       	nop
 28e:	98 b1       	in	r25, 0x08	; 8
 290:	90 7f       	andi	r25, 0xF0	; 240
 292:	98 b9       	out	0x08, r25	; 8
 294:	98 b1       	in	r25, 0x08	; 8
 296:	8f 70       	andi	r24, 0x0F	; 15
 298:	89 2b       	or	r24, r25
 29a:	88 b9       	out	0x08, r24	; 8
 29c:	89 ef       	ldi	r24, 0xF9	; 249
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	01 97       	sbiw	r24, 0x01	; 1
 2a2:	f1 f7       	brne	.-4      	; 0x2a0 <HD44780_write_nibble+0x1e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <HD44780_write_nibble+0x24>
 2a6:	00 00       	nop
 2a8:	44 98       	cbi	0x08, 4	; 8
 2aa:	e9 ef       	ldi	r30, 0xF9	; 249
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	31 97       	sbiw	r30, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <HD44780_write_nibble+0x2c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <HD44780_write_nibble+0x32>
 2b4:	00 00       	nop
 2b6:	44 9a       	sbi	0x08, 4	; 8
 2b8:	89 ef       	ldi	r24, 0xF9	; 249
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <HD44780_write_nibble+0x3a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <HD44780_write_nibble+0x40>
 2c2:	00 00       	nop
 2c4:	44 98       	cbi	0x08, 4	; 8
 2c6:	e9 ef       	ldi	r30, 0xF9	; 249
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	31 97       	sbiw	r30, 0x01	; 1
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <HD44780_write_nibble+0x48>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <HD44780_write_nibble+0x4e>
 2d0:	00 00       	nop
 2d2:	08 95       	ret

000002d4 <HD44780_send>:
 2d4:	cf 93       	push	r28
 2d6:	c8 2f       	mov	r28, r24
 2d8:	89 ef       	ldi	r24, 0xF9	; 249
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <HD44780_send+0x8>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <HD44780_send+0xe>
 2e2:	00 00       	nop
 2e4:	66 23       	and	r22, r22
 2e6:	11 f0       	breq	.+4      	; 0x2ec <HD44780_send+0x18>
 2e8:	45 9a       	sbi	0x08, 5	; 8
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <HD44780_send+0x1a>
 2ec:	45 98       	cbi	0x08, 5	; 8
 2ee:	89 ef       	ldi	r24, 0xF9	; 249
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <HD44780_send+0x1e>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <HD44780_send+0x24>
 2f8:	00 00       	nop
 2fa:	28 98       	cbi	0x05, 0	; 5
 2fc:	89 ef       	ldi	r24, 0xF9	; 249
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <HD44780_send+0x2c>
 304:	00 c0       	rjmp	.+0      	; 0x306 <HD44780_send+0x32>
 306:	00 00       	nop
 308:	8c 2f       	mov	r24, r28
 30a:	82 95       	swap	r24
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	0e 94 41 01 	call	0x282	; 0x282 <HD44780_write_nibble>
 312:	81 ee       	ldi	r24, 0xE1	; 225
 314:	94 e0       	ldi	r25, 0x04	; 4
 316:	01 97       	sbiw	r24, 0x01	; 1
 318:	f1 f7       	brne	.-4      	; 0x316 <HD44780_send+0x42>
 31a:	00 c0       	rjmp	.+0      	; 0x31c <HD44780_send+0x48>
 31c:	00 00       	nop
 31e:	8c 2f       	mov	r24, r28
 320:	0e 94 41 01 	call	0x282	; 0x282 <HD44780_write_nibble>
 324:	cf 91       	pop	r28
 326:	08 95       	ret

00000328 <HD44780_command>:
 328:	60 e0       	ldi	r22, 0x00	; 0
 32a:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <HD44780_send>
 32e:	08 95       	ret

00000330 <HD44780_write>:
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <HD44780_send>
 336:	08 95       	ret

00000338 <HD44780_init>:
 338:	3d 9a       	sbi	0x07, 5	; 7
 33a:	20 9a       	sbi	0x04, 0	; 4
 33c:	3c 9a       	sbi	0x07, 4	; 7
 33e:	87 b1       	in	r24, 0x07	; 7
 340:	8f 60       	ori	r24, 0x0F	; 15
 342:	87 b9       	out	0x07, r24	; 7
 344:	85 ea       	ldi	r24, 0xA5	; 165
 346:	9e e0       	ldi	r25, 0x0E	; 14
 348:	01 97       	sbiw	r24, 0x01	; 1
 34a:	f1 f7       	brne	.-4      	; 0x348 <HD44780_init+0x10>
 34c:	00 c0       	rjmp	.+0      	; 0x34e <HD44780_init+0x16>
 34e:	00 00       	nop
 350:	44 98       	cbi	0x08, 4	; 8
 352:	45 98       	cbi	0x08, 5	; 8
 354:	28 98       	cbi	0x05, 0	; 5
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	94 e0       	ldi	r25, 0x04	; 4
 35a:	01 97       	sbiw	r24, 0x01	; 1
 35c:	f1 f7       	brne	.-4      	; 0x35a <HD44780_init+0x22>
 35e:	00 c0       	rjmp	.+0      	; 0x360 <HD44780_init+0x28>
 360:	00 00       	nop
 362:	83 e0       	ldi	r24, 0x03	; 3
 364:	0e 94 41 01 	call	0x282	; 0x282 <HD44780_write_nibble>
 368:	81 ee       	ldi	r24, 0xE1	; 225
 36a:	94 e0       	ldi	r25, 0x04	; 4
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <HD44780_init+0x34>
 370:	00 c0       	rjmp	.+0      	; 0x372 <HD44780_init+0x3a>
 372:	00 00       	nop
 374:	83 e0       	ldi	r24, 0x03	; 3
 376:	0e 94 41 01 	call	0x282	; 0x282 <HD44780_write_nibble>
 37a:	81 ee       	ldi	r24, 0xE1	; 225
 37c:	94 e0       	ldi	r25, 0x04	; 4
 37e:	01 97       	sbiw	r24, 0x01	; 1
 380:	f1 f7       	brne	.-4      	; 0x37e <HD44780_init+0x46>
 382:	00 c0       	rjmp	.+0      	; 0x384 <HD44780_init+0x4c>
 384:	00 00       	nop
 386:	83 e0       	ldi	r24, 0x03	; 3
 388:	0e 94 41 01 	call	0x282	; 0x282 <HD44780_write_nibble>
 38c:	81 ee       	ldi	r24, 0xE1	; 225
 38e:	94 e0       	ldi	r25, 0x04	; 4
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <HD44780_init+0x58>
 394:	00 c0       	rjmp	.+0      	; 0x396 <HD44780_init+0x5e>
 396:	00 00       	nop
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	0e 94 41 01 	call	0x282	; 0x282 <HD44780_write_nibble>
 39e:	88 e2       	ldi	r24, 0x28	; 40
 3a0:	0e 94 94 01 	call	0x328	; 0x328 <HD44780_command>
 3a4:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <HD44780_displayparams>
 3a8:	88 e0       	ldi	r24, 0x08	; 8
 3aa:	0e 94 94 01 	call	0x328	; 0x328 <HD44780_command>
 3ae:	08 95       	ret

000003b0 <HD44780_on>:
 3b0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <HD44780_displayparams>
 3b4:	98 2f       	mov	r25, r24
 3b6:	94 60       	ori	r25, 0x04	; 4
 3b8:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <HD44780_displayparams>
 3bc:	8c 60       	ori	r24, 0x0C	; 12
 3be:	0e 94 94 01 	call	0x328	; 0x328 <HD44780_command>
 3c2:	08 95       	ret

000003c4 <HD44780_clear>:
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	0e 94 94 01 	call	0x328	; 0x328 <HD44780_command>
 3ca:	83 ed       	ldi	r24, 0xD3	; 211
 3cc:	90 e3       	ldi	r25, 0x30	; 48
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <HD44780_clear+0xa>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <HD44780_clear+0x10>
 3d4:	00 00       	nop
 3d6:	08 95       	ret

000003d8 <HD44780_puts>:
}

void HD44780_puts(char *string) {
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	ec 01       	movw	r28, r24
  for (char *it = string; *it; it++) {
 3de:	88 81       	ld	r24, Y
 3e0:	88 23       	and	r24, r24
 3e2:	31 f0       	breq	.+12     	; 0x3f0 <HD44780_puts+0x18>
 3e4:	21 96       	adiw	r28, 0x01	; 1
	//_delay_ms(2);   // seems to be not necessary, but in case something is wrong add it
    HD44780_write(*it);
 3e6:	0e 94 98 01 	call	0x330	; 0x330 <HD44780_write>
  _delay_ms(5);  //todo: test is it necessary
  HD44780_command(HD44780_SETDDRAMADDR | (col + offsets[row]));
}

void HD44780_puts(char *string) {
  for (char *it = string; *it; it++) {
 3ea:	89 91       	ld	r24, Y+
 3ec:	81 11       	cpse	r24, r1
 3ee:	fb cf       	rjmp	.-10     	; 0x3e6 <HD44780_puts+0xe>
	//_delay_ms(2);   // seems to be not necessary, but in case something is wrong add it
    HD44780_write(*it);
  }
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <main>:
    //_delay_ms(100);		// Wait for stable power 
    //init_time_keeping();
    //init_event_counting();
    //sei();

	HD44780_init();
 3f6:	0e 94 9c 01 	call	0x338	; 0x338 <HD44780_init>
	HD44780_on();
 3fa:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <HD44780_on>
	HD44780_clear();
 3fe:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <HD44780_clear>
	//HD44780_puts(buff_txt);
	//HD44780_puts(msg);
	
	InitWindowTimer();
 402:	0e 94 53 00 	call	0xa6	; 0xa6 <InitWindowTimer>
	//InitSampleCounter();
	sei();
 406:	78 94       	sei
	
	
	for (;;) {
//		_delay_ms(1000);

		LCD_LED_SET;
 408:	5f 9a       	sbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 40a:	2f ef       	ldi	r18, 0xFF	; 255
 40c:	81 ee       	ldi	r24, 0xE1	; 225
 40e:	94 e0       	ldi	r25, 0x04	; 4
 410:	21 50       	subi	r18, 0x01	; 1
 412:	80 40       	sbci	r24, 0x00	; 0
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
		_delay_ms(100);
		LCD_LED_RESET;
 41c:	5f 98       	cbi	0x0b, 7	; 11
 41e:	2f ef       	ldi	r18, 0xFF	; 255
 420:	81 ee       	ldi	r24, 0xE1	; 225
 422:	94 e0       	ldi	r25, 0x04	; 4
 424:	21 50       	subi	r18, 0x01	; 1
 426:	80 40       	sbci	r24, 0x00	; 0
 428:	90 40       	sbci	r25, 0x00	; 0
 42a:	e1 f7       	brne	.-8      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 42c:	00 c0       	rjmp	.+0      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 42e:	00 00       	nop
		_delay_ms(100);
		
		//getTicksT0(buff_txt);
		getT1Counts(buff_txt);
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	0e 94 32 01 	call	0x264	; 0x264 <getT1Counts>

		HD44780_clear();
 438:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <HD44780_clear>
		HD44780_puts(buff_txt);
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	91 e0       	ldi	r25, 0x01	; 1
 440:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <HD44780_puts>
	}
 444:	e1 cf       	rjmp	.-62     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

00000446 <__ultoa_ncheck>:
 446:	bb 27       	eor	r27, r27

00000448 <__ultoa_common>:
 448:	fa 01       	movw	r30, r20
 44a:	a6 2f       	mov	r26, r22
 44c:	62 17       	cp	r22, r18
 44e:	71 05       	cpc	r23, r1
 450:	81 05       	cpc	r24, r1
 452:	91 05       	cpc	r25, r1
 454:	33 0b       	sbc	r19, r19
 456:	30 fb       	bst	r19, 0
 458:	66 f0       	brts	.+24     	; 0x472 <__ultoa_common+0x2a>
 45a:	aa 27       	eor	r26, r26
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	99 1f       	adc	r25, r25
 464:	aa 1f       	adc	r26, r26
 466:	a2 17       	cp	r26, r18
 468:	10 f0       	brcs	.+4      	; 0x46e <__ultoa_common+0x26>
 46a:	a2 1b       	sub	r26, r18
 46c:	63 95       	inc	r22
 46e:	38 50       	subi	r19, 0x08	; 8
 470:	a9 f7       	brne	.-22     	; 0x45c <__ultoa_common+0x14>
 472:	a0 5d       	subi	r26, 0xD0	; 208
 474:	aa 33       	cpi	r26, 0x3A	; 58
 476:	08 f0       	brcs	.+2      	; 0x47a <__ultoa_common+0x32>
 478:	a9 5d       	subi	r26, 0xD9	; 217
 47a:	a1 93       	st	Z+, r26
 47c:	36 f7       	brtc	.-52     	; 0x44a <__ultoa_common+0x2>
 47e:	b1 11       	cpse	r27, r1
 480:	b1 93       	st	Z+, r27
 482:	10 82       	st	Z, r1
 484:	ca 01       	movw	r24, r20
 486:	0c 94 45 02 	jmp	0x48a	; 0x48a <strrev>

0000048a <strrev>:
 48a:	dc 01       	movw	r26, r24
 48c:	fc 01       	movw	r30, r24
 48e:	67 2f       	mov	r22, r23
 490:	71 91       	ld	r23, Z+
 492:	77 23       	and	r23, r23
 494:	e1 f7       	brne	.-8      	; 0x48e <strrev+0x4>
 496:	32 97       	sbiw	r30, 0x02	; 2
 498:	04 c0       	rjmp	.+8      	; 0x4a2 <strrev+0x18>
 49a:	7c 91       	ld	r23, X
 49c:	6d 93       	st	X+, r22
 49e:	70 83       	st	Z, r23
 4a0:	62 91       	ld	r22, -Z
 4a2:	ae 17       	cp	r26, r30
 4a4:	bf 07       	cpc	r27, r31
 4a6:	c8 f3       	brcs	.-14     	; 0x49a <strrev+0x10>
 4a8:	08 95       	ret

000004aa <_exit>:
 4aa:	f8 94       	cli

000004ac <__stop_program>:
 4ac:	ff cf       	rjmp	.-2      	; 0x4ac <__stop_program>
