
toggleProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00800100  00800100  0000050c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  0000057c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000180e  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a39  00000000  00000000  00001eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a4b  00000000  00000000  000028f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002b4  00000000  00000000  00003340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000718  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e74  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00004b80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 31       	cpi	r26, 0x1C	; 28
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <main>
  9e:	0c 94 4a 02 	jmp	0x494	; 0x494 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FREQCNT_Init>:
	//measuredFreqHz = samplesNbr * ((FREQCNT_MEASUREMENT_WINDOW_SIZE_US/1000) * 10);
	
	measuredFreqHz = samplesNbr;
	
	return measuredFreqHz;
}
  a6:	f8 94       	cli
  a8:	14 bc       	out	0x24, r1	; 36
  aa:	15 bc       	out	0x25, r1	; 37
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	85 bd       	out	0x25, r24	; 37
  b0:	16 bc       	out	0x26, r1	; 38
  b2:	ee e6       	ldi	r30, 0x6E	; 110
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	10 82       	st	Z, r1
  b8:	80 83       	st	Z, r24
  ba:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  be:	e1 e8       	ldi	r30, 0x81	; 129
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	10 82       	st	Z, r1
  c4:	96 e0       	ldi	r25, 0x06	; 6
  c6:	90 83       	st	Z, r25
  c8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  cc:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  d0:	ef e6       	ldi	r30, 0x6F	; 111
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	10 82       	st	Z, r1
  d6:	80 83       	st	Z, r24
  d8:	78 94       	sei
  da:	08 95       	ret

000000dc <__vector_16>:
  dc:	1f 92       	push	r1
  de:	0f 92       	push	r0
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	0f 92       	push	r0
  e4:	11 24       	eor	r1, r1
  e6:	2f 93       	push	r18
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	ef 93       	push	r30
  fe:	ff 93       	push	r31
 100:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <t0_WindowOverflowCnt>
 104:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <t0_WindowOverflowCnt+0x1>
 108:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <t0_WindowOverflowCnt+0x2>
 10c:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <t0_WindowOverflowCnt+0x3>
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	a1 1d       	adc	r26, r1
 114:	b1 1d       	adc	r27, r1
 116:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <t0_WindowOverflowCnt>
 11a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <t0_WindowOverflowCnt+0x1>
 11e:	a0 93 0a 01 	sts	0x010A, r26	; 0x80010a <t0_WindowOverflowCnt+0x2>
 122:	b0 93 0b 01 	sts	0x010B, r27	; 0x80010b <t0_WindowOverflowCnt+0x3>
 126:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <t0_WindowOverflowCnt>
 12a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <t0_WindowOverflowCnt+0x1>
 12e:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <t0_WindowOverflowCnt+0x2>
 132:	b0 91 0b 01 	lds	r27, 0x010B	; 0x80010b <t0_WindowOverflowCnt+0x3>
 136:	82 31       	cpi	r24, 0x12	; 18
 138:	9a 47       	sbci	r25, 0x7A	; 122
 13a:	a1 05       	cpc	r26, r1
 13c:	b1 05       	cpc	r27, r1
 13e:	c8 f1       	brcs	.+114    	; 0x1b2 <__vector_16+0xd6>
 140:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <t0_WindowOverflowCnt>
 144:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <t0_WindowOverflowCnt+0x1>
 148:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <t0_WindowOverflowCnt+0x2>
 14c:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <t0_WindowOverflowCnt+0x3>
 150:	f8 94       	cli
 152:	e1 e8       	ldi	r30, 0x81	; 129
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 7f       	andi	r24, 0xF8	; 248
 15a:	80 83       	st	Z, r24
 15c:	c4 e8       	ldi	r28, 0x84	; 132
 15e:	d0 e0       	ldi	r29, 0x00	; 0
 160:	48 81       	ld	r20, Y
 162:	59 81       	ldd	r21, Y+1	; 0x01
 164:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t1_SampleOverflowCnt>
 168:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <t1_SampleOverflowCnt+0x1>
 16c:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <t1_SampleOverflowCnt+0x2>
 170:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <t1_SampleOverflowCnt+0x3>
 174:	dc 01       	movw	r26, r24
 176:	99 27       	eor	r25, r25
 178:	88 27       	eor	r24, r24
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	70 e0       	ldi	r23, 0x00	; 0
 17e:	84 2b       	or	r24, r20
 180:	95 2b       	or	r25, r21
 182:	a6 2b       	or	r26, r22
 184:	b7 2b       	or	r27, r23
 186:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 18a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_end+0x1>
 18e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_end+0x2>
 192:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_end+0x3>
 196:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <t1_SampleOverflowCnt>
 19a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <t1_SampleOverflowCnt+0x1>
 19e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <t1_SampleOverflowCnt+0x2>
 1a2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <t1_SampleOverflowCnt+0x3>
 1a6:	19 82       	std	Y+1, r1	; 0x01
 1a8:	18 82       	st	Y, r1
 1aa:	80 81       	ld	r24, Z
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	80 83       	st	Z, r24
 1b0:	78 94       	sei
 1b2:	ff 91       	pop	r31
 1b4:	ef 91       	pop	r30
 1b6:	df 91       	pop	r29
 1b8:	cf 91       	pop	r28
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <__vector_13>:
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	2f 93       	push	r18
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	af 93       	push	r26
 1e8:	bf 93       	push	r27
 1ea:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t1_SampleOverflowCnt>
 1ee:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <t1_SampleOverflowCnt+0x1>
 1f2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <t1_SampleOverflowCnt+0x2>
 1f6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <t1_SampleOverflowCnt+0x3>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	a1 1d       	adc	r26, r1
 1fe:	b1 1d       	adc	r27, r1
 200:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <t1_SampleOverflowCnt>
 204:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <t1_SampleOverflowCnt+0x1>
 208:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <t1_SampleOverflowCnt+0x2>
 20c:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <t1_SampleOverflowCnt+0x3>
 210:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <t1_SampleOverflowCnt>
 214:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <t1_SampleOverflowCnt+0x1>
 218:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <t1_SampleOverflowCnt+0x2>
 21c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <t1_SampleOverflowCnt+0x3>
 220:	8f 3f       	cpi	r24, 0xFF	; 255
 222:	9f 4f       	sbci	r25, 0xFF	; 255
 224:	af 4f       	sbci	r26, 0xFF	; 255
 226:	bf 4f       	sbci	r27, 0xFF	; 255
 228:	41 f4       	brne	.+16     	; 0x23a <__vector_13+0x64>
 22a:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <t1_SampleOverflowCnt>
 22e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <t1_SampleOverflowCnt+0x1>
 232:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <t1_SampleOverflowCnt+0x2>
 236:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <t1_SampleOverflowCnt+0x3>
 23a:	bf 91       	pop	r27
 23c:	af 91       	pop	r26
 23e:	9f 91       	pop	r25
 240:	8f 91       	pop	r24
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <FREQCNT_GetFrequencyTxt>:


// todo: should be displayed as scalable, with Hz, kHz, MHz.
void FREQCNT_GetFrequencyTxt(unsigned char *buff)
{
 24e:	ac 01       	movw	r20, r24
	unsigned long val = 0;

	cli();
 250:	f8 94       	cli
	val = countedSamplesInWindow;
 252:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_end>
 256:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_end+0x1>
 25a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end+0x2>
 25e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x3>
	sei();
 262:	78 94       	sei
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 264:	2a e0       	ldi	r18, 0x0A	; 10
 266:	0e 94 18 02 	call	0x430	; 0x430 <__ultoa_ncheck>
 26a:	08 95       	ret

0000026c <HD44780_write_nibble>:
  if (row > 1) {
    row = 1;
  }

  _delay_ms(5);  //todo: test is it necessary
  HD44780_command(HD44780_SETDDRAMADDR | (col + offsets[row]));
 26c:	ef e0       	ldi	r30, 0x0F	; 15
 26e:	f7 e2       	ldi	r31, 0x27	; 39
 270:	31 97       	sbiw	r30, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <HD44780_write_nibble+0x4>
 274:	00 c0       	rjmp	.+0      	; 0x276 <HD44780_write_nibble+0xa>
 276:	00 00       	nop
 278:	98 b1       	in	r25, 0x08	; 8
 27a:	90 7f       	andi	r25, 0xF0	; 240
 27c:	98 b9       	out	0x08, r25	; 8
 27e:	98 b1       	in	r25, 0x08	; 8
 280:	8f 70       	andi	r24, 0x0F	; 15
 282:	89 2b       	or	r24, r25
 284:	88 b9       	out	0x08, r24	; 8
 286:	8f ec       	ldi	r24, 0xCF	; 207
 288:	97 e0       	ldi	r25, 0x07	; 7
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <HD44780_write_nibble+0x1e>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <HD44780_write_nibble+0x24>
 290:	00 00       	nop
 292:	44 98       	cbi	0x08, 4	; 8
 294:	ef ec       	ldi	r30, 0xCF	; 207
 296:	f7 e0       	ldi	r31, 0x07	; 7
 298:	31 97       	sbiw	r30, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <HD44780_write_nibble+0x2c>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <HD44780_write_nibble+0x32>
 29e:	00 00       	nop
 2a0:	44 9a       	sbi	0x08, 4	; 8
 2a2:	8f ec       	ldi	r24, 0xCF	; 207
 2a4:	97 e0       	ldi	r25, 0x07	; 7
 2a6:	01 97       	sbiw	r24, 0x01	; 1
 2a8:	f1 f7       	brne	.-4      	; 0x2a6 <HD44780_write_nibble+0x3a>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <HD44780_write_nibble+0x40>
 2ac:	00 00       	nop
 2ae:	44 98       	cbi	0x08, 4	; 8
 2b0:	ef ec       	ldi	r30, 0xCF	; 207
 2b2:	f7 e0       	ldi	r31, 0x07	; 7
 2b4:	31 97       	sbiw	r30, 0x01	; 1
 2b6:	f1 f7       	brne	.-4      	; 0x2b4 <HD44780_write_nibble+0x48>
 2b8:	00 c0       	rjmp	.+0      	; 0x2ba <HD44780_write_nibble+0x4e>
 2ba:	00 00       	nop
 2bc:	08 95       	ret

000002be <HD44780_send>:
 2be:	cf 93       	push	r28
 2c0:	c8 2f       	mov	r28, r24
 2c2:	8f ec       	ldi	r24, 0xCF	; 207
 2c4:	97 e0       	ldi	r25, 0x07	; 7
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <HD44780_send+0x8>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <HD44780_send+0xe>
 2cc:	00 00       	nop
 2ce:	66 23       	and	r22, r22
 2d0:	11 f0       	breq	.+4      	; 0x2d6 <HD44780_send+0x18>
 2d2:	45 9a       	sbi	0x08, 5	; 8
 2d4:	01 c0       	rjmp	.+2      	; 0x2d8 <HD44780_send+0x1a>
 2d6:	45 98       	cbi	0x08, 5	; 8
 2d8:	8f ec       	ldi	r24, 0xCF	; 207
 2da:	97 e0       	ldi	r25, 0x07	; 7
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <HD44780_send+0x1e>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <HD44780_send+0x24>
 2e2:	00 00       	nop
 2e4:	28 98       	cbi	0x05, 0	; 5
 2e6:	8f ec       	ldi	r24, 0xCF	; 207
 2e8:	97 e0       	ldi	r25, 0x07	; 7
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <HD44780_send+0x2c>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <HD44780_send+0x32>
 2f0:	00 00       	nop
 2f2:	8c 2f       	mov	r24, r28
 2f4:	82 95       	swap	r24
 2f6:	8f 70       	andi	r24, 0x0F	; 15
 2f8:	0e 94 36 01 	call	0x26c	; 0x26c <HD44780_write_nibble>
 2fc:	8f e0       	ldi	r24, 0x0F	; 15
 2fe:	97 e2       	ldi	r25, 0x27	; 39
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <HD44780_send+0x42>
 304:	00 c0       	rjmp	.+0      	; 0x306 <HD44780_send+0x48>
 306:	00 00       	nop
 308:	8c 2f       	mov	r24, r28
 30a:	0e 94 36 01 	call	0x26c	; 0x26c <HD44780_write_nibble>
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <HD44780_command>:
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	0e 94 5f 01 	call	0x2be	; 0x2be <HD44780_send>
 318:	08 95       	ret

0000031a <HD44780_write>:
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	0e 94 5f 01 	call	0x2be	; 0x2be <HD44780_send>
 320:	08 95       	ret

00000322 <HD44780_init>:
 322:	3d 9a       	sbi	0x07, 5	; 7
 324:	20 9a       	sbi	0x04, 0	; 4
 326:	3c 9a       	sbi	0x07, 4	; 7
 328:	87 b1       	in	r24, 0x07	; 7
 32a:	8f 60       	ori	r24, 0x0F	; 15
 32c:	87 b9       	out	0x07, r24	; 7
 32e:	8f e2       	ldi	r24, 0x2F	; 47
 330:	95 e7       	ldi	r25, 0x75	; 117
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <HD44780_init+0x10>
 336:	00 c0       	rjmp	.+0      	; 0x338 <HD44780_init+0x16>
 338:	00 00       	nop
 33a:	44 98       	cbi	0x08, 4	; 8
 33c:	45 98       	cbi	0x08, 5	; 8
 33e:	28 98       	cbi	0x05, 0	; 5
 340:	87 e0       	ldi	r24, 0x07	; 7
 342:	90 e2       	ldi	r25, 0x20	; 32
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <HD44780_init+0x22>
 348:	00 c0       	rjmp	.+0      	; 0x34a <HD44780_init+0x28>
 34a:	00 00       	nop
 34c:	83 e0       	ldi	r24, 0x03	; 3
 34e:	0e 94 36 01 	call	0x26c	; 0x26c <HD44780_write_nibble>
 352:	8f e0       	ldi	r24, 0x0F	; 15
 354:	97 e2       	ldi	r25, 0x27	; 39
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <HD44780_init+0x34>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <HD44780_init+0x3a>
 35c:	00 00       	nop
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 36 01 	call	0x26c	; 0x26c <HD44780_write_nibble>
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	97 e2       	ldi	r25, 0x27	; 39
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <HD44780_init+0x46>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <HD44780_init+0x4c>
 36e:	00 00       	nop
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	0e 94 36 01 	call	0x26c	; 0x26c <HD44780_write_nibble>
 376:	8f e0       	ldi	r24, 0x0F	; 15
 378:	97 e2       	ldi	r25, 0x27	; 39
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <HD44780_init+0x58>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <HD44780_init+0x5e>
 380:	00 00       	nop
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	0e 94 36 01 	call	0x26c	; 0x26c <HD44780_write_nibble>
 388:	88 e2       	ldi	r24, 0x28	; 40
 38a:	0e 94 89 01 	call	0x312	; 0x312 <HD44780_command>
 38e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <HD44780_displayparams>
 392:	88 e0       	ldi	r24, 0x08	; 8
 394:	0e 94 89 01 	call	0x312	; 0x312 <HD44780_command>
 398:	08 95       	ret

0000039a <HD44780_on>:
 39a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <HD44780_displayparams>
 39e:	98 2f       	mov	r25, r24
 3a0:	94 60       	ori	r25, 0x04	; 4
 3a2:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <HD44780_displayparams>
 3a6:	8c 60       	ori	r24, 0x0C	; 12
 3a8:	0e 94 89 01 	call	0x312	; 0x312 <HD44780_command>
 3ac:	08 95       	ret

000003ae <HD44780_clear>:
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	0e 94 89 01 	call	0x312	; 0x312 <HD44780_command>
 3b4:	2f e7       	ldi	r18, 0x7F	; 127
 3b6:	88 e3       	ldi	r24, 0x38	; 56
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	21 50       	subi	r18, 0x01	; 1
 3bc:	80 40       	sbci	r24, 0x00	; 0
 3be:	90 40       	sbci	r25, 0x00	; 0
 3c0:	e1 f7       	brne	.-8      	; 0x3ba <HD44780_clear+0xc>
 3c2:	00 c0       	rjmp	.+0      	; 0x3c4 <HD44780_clear+0x16>
 3c4:	00 00       	nop
 3c6:	08 95       	ret

000003c8 <HD44780_puts>:
}

void HD44780_puts(char *string) {
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ec 01       	movw	r28, r24
  for (char *it = string; *it; it++) {
 3ce:	88 81       	ld	r24, Y
 3d0:	88 23       	and	r24, r24
 3d2:	31 f0       	breq	.+12     	; 0x3e0 <HD44780_puts+0x18>
 3d4:	21 96       	adiw	r28, 0x01	; 1
	//_delay_ms(2);   // seems to be not necessary, but in case something is wrong add it
    HD44780_write(*it);
 3d6:	0e 94 8d 01 	call	0x31a	; 0x31a <HD44780_write>
  _delay_ms(5);  //todo: test is it necessary
  HD44780_command(HD44780_SETDDRAMADDR | (col + offsets[row]));
}

void HD44780_puts(char *string) {
  for (char *it = string; *it; it++) {
 3da:	89 91       	ld	r24, Y+
 3dc:	81 11       	cpse	r24, r1
 3de:	fb cf       	rjmp	.-10     	; 0x3d6 <HD44780_puts+0xe>
	//_delay_ms(2);   // seems to be not necessary, but in case something is wrong add it
    HD44780_write(*it);
  }
}
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	80 e7       	ldi	r24, 0x70	; 112
 3ea:	92 e0       	ldi	r25, 0x02	; 2
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x6>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <main+0x10>
 3f6:	00 00       	nop

int main(void)
{
	_delay_ms(100);		// Wait for stable power 

	HD44780_init();
 3f8:	0e 94 91 01 	call	0x322	; 0x322 <HD44780_init>
	HD44780_on();
 3fc:	0e 94 cd 01 	call	0x39a	; 0x39a <HD44780_on>
	HD44780_clear();
 400:	0e 94 d7 01 	call	0x3ae	; 0x3ae <HD44780_clear>

	FREQCNT_Init();
 404:	0e 94 53 00 	call	0xa6	; 0xa6 <FREQCNT_Init>
 408:	2f ef       	ldi	r18, 0xFF	; 255
 40a:	81 ee       	ldi	r24, 0xE1	; 225
 40c:	94 e0       	ldi	r25, 0x04	; 4
 40e:	21 50       	subi	r18, 0x01	; 1
 410:	80 40       	sbci	r24, 0x00	; 0
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	e1 f7       	brne	.-8      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 418:	00 00       	nop
	
	for (;;) {
		_delay_ms(200);  // For any case, because measurement window is 1s
		FREQCNT_GetFrequencyTxt(buff_txt);
 41a:	8d e0       	ldi	r24, 0x0D	; 13
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 27 01 	call	0x24e	; 0x24e <FREQCNT_GetFrequencyTxt>
		HD44780_clear();
 422:	0e 94 d7 01 	call	0x3ae	; 0x3ae <HD44780_clear>
		HD44780_puts(buff_txt);
 426:	8d e0       	ldi	r24, 0x0D	; 13
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <HD44780_puts>
 42e:	ec cf       	rjmp	.-40     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

00000430 <__ultoa_ncheck>:
 430:	bb 27       	eor	r27, r27

00000432 <__ultoa_common>:
 432:	fa 01       	movw	r30, r20
 434:	a6 2f       	mov	r26, r22
 436:	62 17       	cp	r22, r18
 438:	71 05       	cpc	r23, r1
 43a:	81 05       	cpc	r24, r1
 43c:	91 05       	cpc	r25, r1
 43e:	33 0b       	sbc	r19, r19
 440:	30 fb       	bst	r19, 0
 442:	66 f0       	brts	.+24     	; 0x45c <__ultoa_common+0x2a>
 444:	aa 27       	eor	r26, r26
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	aa 1f       	adc	r26, r26
 450:	a2 17       	cp	r26, r18
 452:	10 f0       	brcs	.+4      	; 0x458 <__ultoa_common+0x26>
 454:	a2 1b       	sub	r26, r18
 456:	63 95       	inc	r22
 458:	38 50       	subi	r19, 0x08	; 8
 45a:	a9 f7       	brne	.-22     	; 0x446 <__ultoa_common+0x14>
 45c:	a0 5d       	subi	r26, 0xD0	; 208
 45e:	aa 33       	cpi	r26, 0x3A	; 58
 460:	08 f0       	brcs	.+2      	; 0x464 <__ultoa_common+0x32>
 462:	a9 5d       	subi	r26, 0xD9	; 217
 464:	a1 93       	st	Z+, r26
 466:	36 f7       	brtc	.-52     	; 0x434 <__ultoa_common+0x2>
 468:	b1 11       	cpse	r27, r1
 46a:	b1 93       	st	Z+, r27
 46c:	10 82       	st	Z, r1
 46e:	ca 01       	movw	r24, r20
 470:	0c 94 3a 02 	jmp	0x474	; 0x474 <strrev>

00000474 <strrev>:
 474:	dc 01       	movw	r26, r24
 476:	fc 01       	movw	r30, r24
 478:	67 2f       	mov	r22, r23
 47a:	71 91       	ld	r23, Z+
 47c:	77 23       	and	r23, r23
 47e:	e1 f7       	brne	.-8      	; 0x478 <strrev+0x4>
 480:	32 97       	sbiw	r30, 0x02	; 2
 482:	04 c0       	rjmp	.+8      	; 0x48c <strrev+0x18>
 484:	7c 91       	ld	r23, X
 486:	6d 93       	st	X+, r22
 488:	70 83       	st	Z, r23
 48a:	62 91       	ld	r22, -Z
 48c:	ae 17       	cp	r26, r30
 48e:	bf 07       	cpc	r27, r31
 490:	c8 f3       	brcs	.-14     	; 0x484 <strrev+0x10>
 492:	08 95       	ret

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
