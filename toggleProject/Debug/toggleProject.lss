
toggleProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000308  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000308  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  000003a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b38  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c79  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008df  00000000  00000000  00002cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00003594  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006f3  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000388  00000000  00000000  00003e67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000041ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e8 e0       	ldi	r30, 0x08	; 8
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a6 30       	cpi	r26, 0x06	; 6
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a7 30       	cpi	r26, 0x07	; 7
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  e2:	0c 94 82 01 	jmp	0x304	; 0x304 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <lcd_write_nibble>:
  if (row > 1) {
    row = 1;
  }

  _delay_ms(5);
  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
  ea:	e1 ee       	ldi	r30, 0xE1	; 225
  ec:	f4 e0       	ldi	r31, 0x04	; 4
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <lcd_write_nibble+0x4>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <lcd_write_nibble+0xa>
  f4:	00 00       	nop
  f6:	9b b1       	in	r25, 0x0b	; 11
  f8:	90 7f       	andi	r25, 0xF0	; 240
  fa:	9b b9       	out	0x0b, r25	; 11
  fc:	9b b1       	in	r25, 0x0b	; 11
  fe:	8f 70       	andi	r24, 0x0F	; 15
 100:	89 2b       	or	r24, r25
 102:	8b b9       	out	0x0b, r24	; 11
 104:	89 ef       	ldi	r24, 0xF9	; 249
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <lcd_write_nibble+0x1e>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <lcd_write_nibble+0x24>
 10e:	00 00       	nop
 110:	46 98       	cbi	0x08, 6	; 8
 112:	e9 ef       	ldi	r30, 0xF9	; 249
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	31 97       	sbiw	r30, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_write_nibble+0x2c>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_write_nibble+0x32>
 11c:	00 00       	nop
 11e:	46 9a       	sbi	0x08, 6	; 8
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <lcd_write_nibble+0x3a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <lcd_write_nibble+0x40>
 12a:	00 00       	nop
 12c:	46 98       	cbi	0x08, 6	; 8
 12e:	e9 ef       	ldi	r30, 0xF9	; 249
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_write_nibble+0x48>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_write_nibble+0x4e>
 138:	00 00       	nop
 13a:	f4 e6       	ldi	r31, 0x64	; 100
 13c:	fa 95       	dec	r31
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_write_nibble+0x52>
 140:	08 95       	ret

00000142 <lcd_send>:
 142:	cf 93       	push	r28
 144:	c8 2f       	mov	r28, r24
 146:	89 ef       	ldi	r24, 0xF9	; 249
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <lcd_send+0x8>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_send+0xe>
 150:	00 00       	nop
 152:	66 23       	and	r22, r22
 154:	11 f0       	breq	.+4      	; 0x15a <lcd_send+0x18>
 156:	5c 9a       	sbi	0x0b, 4	; 11
 158:	01 c0       	rjmp	.+2      	; 0x15c <lcd_send+0x1a>
 15a:	5c 98       	cbi	0x0b, 4	; 11
 15c:	89 ef       	ldi	r24, 0xF9	; 249
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <lcd_send+0x1e>
 164:	00 c0       	rjmp	.+0      	; 0x166 <lcd_send+0x24>
 166:	00 00       	nop
 168:	5f 98       	cbi	0x0b, 7	; 11
 16a:	89 ef       	ldi	r24, 0xF9	; 249
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <lcd_send+0x2c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <lcd_send+0x32>
 174:	00 00       	nop
 176:	8c 2f       	mov	r24, r28
 178:	82 95       	swap	r24
 17a:	8f 70       	andi	r24, 0x0F	; 15
 17c:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_nibble>
 180:	81 ee       	ldi	r24, 0xE1	; 225
 182:	94 e0       	ldi	r25, 0x04	; 4
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <lcd_send+0x42>
 188:	00 c0       	rjmp	.+0      	; 0x18a <lcd_send+0x48>
 18a:	00 00       	nop
 18c:	8c 2f       	mov	r24, r28
 18e:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_nibble>
 192:	cf 91       	pop	r28
 194:	08 95       	ret

00000196 <lcd_command>:
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_send>
 19c:	08 95       	ret

0000019e <lcd_write>:
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_send>
 1a4:	08 95       	ret

000001a6 <lcd_init>:
 1a6:	54 9a       	sbi	0x0a, 4	; 10
 1a8:	57 9a       	sbi	0x0a, 7	; 10
 1aa:	3e 9a       	sbi	0x07, 6	; 7
 1ac:	8a b1       	in	r24, 0x0a	; 10
 1ae:	8f 60       	ori	r24, 0x0F	; 15
 1b0:	8a b9       	out	0x0a, r24	; 10
 1b2:	83 ed       	ldi	r24, 0xD3	; 211
 1b4:	90 e3       	ldi	r25, 0x30	; 48
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x10>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <lcd_init+0x16>
 1bc:	00 00       	nop
 1be:	46 98       	cbi	0x08, 6	; 8
 1c0:	89 ef       	ldi	r24, 0xF9	; 249
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x1e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x24>
 1ca:	00 00       	nop
 1cc:	5c 98       	cbi	0x0b, 4	; 11
 1ce:	89 ef       	ldi	r24, 0xF9	; 249
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_init+0x2c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <lcd_init+0x32>
 1d8:	00 00       	nop
 1da:	5f 98       	cbi	0x0b, 7	; 11
 1dc:	89 ef       	ldi	r24, 0xF9	; 249
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init+0x3a>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init+0x40>
 1e6:	00 00       	nop
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	94 e0       	ldi	r25, 0x04	; 4
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <lcd_init+0x46>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <lcd_init+0x4c>
 1f2:	00 00       	nop
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_nibble>
 1fa:	87 e8       	ldi	r24, 0x87	; 135
 1fc:	93 e1       	ldi	r25, 0x13	; 19
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x58>
 202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x5e>
 204:	00 00       	nop
 206:	83 e0       	ldi	r24, 0x03	; 3
 208:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_nibble>
 20c:	87 e8       	ldi	r24, 0x87	; 135
 20e:	93 e1       	ldi	r25, 0x13	; 19
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <lcd_init+0x6a>
 214:	00 c0       	rjmp	.+0      	; 0x216 <lcd_init+0x70>
 216:	00 00       	nop
 218:	83 e0       	ldi	r24, 0x03	; 3
 21a:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_nibble>
 21e:	87 e8       	ldi	r24, 0x87	; 135
 220:	93 e1       	ldi	r25, 0x13	; 19
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x7c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x82>
 228:	00 00       	nop
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 75 00 	call	0xea	; 0xea <lcd_write_nibble>
 230:	87 e8       	ldi	r24, 0x87	; 135
 232:	93 e1       	ldi	r25, 0x13	; 19
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <lcd_init+0x8e>
 238:	00 c0       	rjmp	.+0      	; 0x23a <lcd_init+0x94>
 23a:	00 00       	nop
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_command>
 242:	87 e8       	ldi	r24, 0x87	; 135
 244:	93 e1       	ldi	r25, 0x13	; 19
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0xa0>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_init+0xa6>
 24c:	00 00       	nop
 24e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
 252:	88 e0       	ldi	r24, 0x08	; 8
 254:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_command>
 258:	08 95       	ret

0000025a <lcd_on>:
 25a:	81 ee       	ldi	r24, 0xE1	; 225
 25c:	94 e0       	ldi	r25, 0x04	; 4
 25e:	01 97       	sbiw	r24, 0x01	; 1
 260:	f1 f7       	brne	.-4      	; 0x25e <lcd_on+0x4>
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_on+0xa>
 264:	00 00       	nop
 266:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 26a:	98 2f       	mov	r25, r24
 26c:	94 60       	ori	r25, 0x04	; 4
 26e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <__data_end>
 272:	8c 60       	ori	r24, 0x0C	; 12
 274:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_command>
 278:	08 95       	ret

0000027a <lcd_clear>:
 27a:	81 ee       	ldi	r24, 0xE1	; 225
 27c:	94 e0       	ldi	r25, 0x04	; 4
 27e:	01 97       	sbiw	r24, 0x01	; 1
 280:	f1 f7       	brne	.-4      	; 0x27e <lcd_clear+0x4>
 282:	00 c0       	rjmp	.+0      	; 0x284 <lcd_clear+0xa>
 284:	00 00       	nop
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_command>
 28c:	83 ed       	ldi	r24, 0xD3	; 211
 28e:	90 e3       	ldi	r25, 0x30	; 48
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <lcd_clear+0x16>
 294:	00 c0       	rjmp	.+0      	; 0x296 <lcd_clear+0x1c>
 296:	00 00       	nop
 298:	08 95       	ret

0000029a <lcd_puts>:
}

void lcd_puts(char *string) {
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	ec 01       	movw	r28, r24
  for (char *it = string; *it; it++) {
 2a0:	88 81       	ld	r24, Y
 2a2:	88 23       	and	r24, r24
 2a4:	61 f0       	breq	.+24     	; 0x2be <lcd_puts+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	83 ef       	ldi	r24, 0xF3	; 243
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	01 97       	sbiw	r24, 0x01	; 1
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_puts+0x10>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_puts+0x16>
 2b0:	00 00       	nop
	_delay_ms(2);  
    lcd_write(*it);
 2b2:	89 91       	ld	r24, Y+
 2b4:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
  _delay_ms(5);
  lcd_command(LCD_SETDDRAMADDR | (col + offsets[row]));
}

void lcd_puts(char *string) {
  for (char *it = string; *it; it++) {
 2b8:	88 81       	ld	r24, Y
 2ba:	81 11       	cpse	r24, r1
 2bc:	f4 cf       	rjmp	.-24     	; 0x2a6 <lcd_puts+0xc>
	_delay_ms(2);  
    lcd_write(*it);
  }
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <main>:
    }
*/

	char *msg = "test";

	lcd_init();
 2c4:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <lcd_init>
	lcd_on();
 2c8:	0e 94 2d 01 	call	0x25a	; 0x25a <lcd_on>
	lcd_clear();
 2cc:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_clear>
	lcd_puts(msg);
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 4d 01 	call	0x29a	; 0x29a <lcd_puts>


	LCD_LED_CONFIG;
 2d8:	24 9a       	sbi	0x04, 4	; 4
	while (1)   //loop forever
	{
		LCD_LED_SET;
 2da:	2c 9a       	sbi	0x05, 4	; 5
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	89 e6       	ldi	r24, 0x69	; 105
 2e0:	98 e1       	ldi	r25, 0x18	; 24
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <main+0x1e>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <main+0x28>
 2ec:	00 00       	nop
		_delay_ms(500);
		LCD_LED_RESET;
 2ee:	2c 98       	cbi	0x05, 4	; 5
 2f0:	2f ef       	ldi	r18, 0xFF	; 255
 2f2:	89 e6       	ldi	r24, 0x69	; 105
 2f4:	98 e1       	ldi	r25, 0x18	; 24
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	80 40       	sbci	r24, 0x00	; 0
 2fa:	90 40       	sbci	r25, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <main+0x32>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <main+0x3c>
 300:	00 00       	nop
 302:	eb cf       	rjmp	.-42     	; 0x2da <main+0x16>

00000304 <_exit>:
 304:	f8 94       	cli

00000306 <__stop_program>:
 306:	ff cf       	rjmp	.-2      	; 0x306 <__stop_program>
