
toggleProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000025e  000002f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000025e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800112  00800112  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001537  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089f  00000000  00000000  0000199b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000846  00000000  00000000  0000223a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  00002a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005f2  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034f  00000000  00000000  00003252  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000035a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  9e:	0c 94 2d 01 	jmp	0x25a	; 0x25a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <HD44780_write_nibble>:
  if (row > 1) {
    row = 1;
  }

  _delay_ms(5);  //todo: test is it necessary
  HD44780_command(HD44780_SETDDRAMADDR | (col + offsets[row]));
  a6:	e1 ee       	ldi	r30, 0xE1	; 225
  a8:	f4 e0       	ldi	r31, 0x04	; 4
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <HD44780_write_nibble+0x4>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <HD44780_write_nibble+0xa>
  b0:	00 00       	nop
  b2:	98 b1       	in	r25, 0x08	; 8
  b4:	90 7f       	andi	r25, 0xF0	; 240
  b6:	98 b9       	out	0x08, r25	; 8
  b8:	98 b1       	in	r25, 0x08	; 8
  ba:	8f 70       	andi	r24, 0x0F	; 15
  bc:	89 2b       	or	r24, r25
  be:	88 b9       	out	0x08, r24	; 8
  c0:	89 ef       	ldi	r24, 0xF9	; 249
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <HD44780_write_nibble+0x1e>
  c8:	00 c0       	rjmp	.+0      	; 0xca <HD44780_write_nibble+0x24>
  ca:	00 00       	nop
  cc:	44 98       	cbi	0x08, 4	; 8
  ce:	e9 ef       	ldi	r30, 0xF9	; 249
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <HD44780_write_nibble+0x2c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <HD44780_write_nibble+0x32>
  d8:	00 00       	nop
  da:	44 9a       	sbi	0x08, 4	; 8
  dc:	89 ef       	ldi	r24, 0xF9	; 249
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <HD44780_write_nibble+0x3a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <HD44780_write_nibble+0x40>
  e6:	00 00       	nop
  e8:	44 98       	cbi	0x08, 4	; 8
  ea:	e9 ef       	ldi	r30, 0xF9	; 249
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <HD44780_write_nibble+0x48>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <HD44780_write_nibble+0x4e>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <HD44780_send>:
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	89 ef       	ldi	r24, 0xF9	; 249
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <HD44780_send+0x8>
 104:	00 c0       	rjmp	.+0      	; 0x106 <HD44780_send+0xe>
 106:	00 00       	nop
 108:	66 23       	and	r22, r22
 10a:	11 f0       	breq	.+4      	; 0x110 <HD44780_send+0x18>
 10c:	45 9a       	sbi	0x08, 5	; 8
 10e:	01 c0       	rjmp	.+2      	; 0x112 <HD44780_send+0x1a>
 110:	45 98       	cbi	0x08, 5	; 8
 112:	89 ef       	ldi	r24, 0xF9	; 249
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <HD44780_send+0x1e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <HD44780_send+0x24>
 11c:	00 00       	nop
 11e:	28 98       	cbi	0x05, 0	; 5
 120:	89 ef       	ldi	r24, 0xF9	; 249
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <HD44780_send+0x2c>
 128:	00 c0       	rjmp	.+0      	; 0x12a <HD44780_send+0x32>
 12a:	00 00       	nop
 12c:	8c 2f       	mov	r24, r28
 12e:	82 95       	swap	r24
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <HD44780_write_nibble>
 136:	81 ee       	ldi	r24, 0xE1	; 225
 138:	94 e0       	ldi	r25, 0x04	; 4
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <HD44780_send+0x42>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <HD44780_send+0x48>
 140:	00 00       	nop
 142:	8c 2f       	mov	r24, r28
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <HD44780_write_nibble>
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <HD44780_command>:
 14c:	60 e0       	ldi	r22, 0x00	; 0
 14e:	0e 94 7c 00 	call	0xf8	; 0xf8 <HD44780_send>
 152:	08 95       	ret

00000154 <HD44780_write>:
 154:	61 e0       	ldi	r22, 0x01	; 1
 156:	0e 94 7c 00 	call	0xf8	; 0xf8 <HD44780_send>
 15a:	08 95       	ret

0000015c <HD44780_init>:
 15c:	3d 9a       	sbi	0x07, 5	; 7
 15e:	20 9a       	sbi	0x04, 0	; 4
 160:	3c 9a       	sbi	0x07, 4	; 7
 162:	87 b1       	in	r24, 0x07	; 7
 164:	8f 60       	ori	r24, 0x0F	; 15
 166:	87 b9       	out	0x07, r24	; 7
 168:	85 ea       	ldi	r24, 0xA5	; 165
 16a:	9e e0       	ldi	r25, 0x0E	; 14
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <HD44780_init+0x10>
 170:	00 c0       	rjmp	.+0      	; 0x172 <HD44780_init+0x16>
 172:	00 00       	nop
 174:	44 98       	cbi	0x08, 4	; 8
 176:	45 98       	cbi	0x08, 5	; 8
 178:	28 98       	cbi	0x05, 0	; 5
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	94 e0       	ldi	r25, 0x04	; 4
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <HD44780_init+0x22>
 182:	00 c0       	rjmp	.+0      	; 0x184 <HD44780_init+0x28>
 184:	00 00       	nop
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	0e 94 53 00 	call	0xa6	; 0xa6 <HD44780_write_nibble>
 18c:	81 ee       	ldi	r24, 0xE1	; 225
 18e:	94 e0       	ldi	r25, 0x04	; 4
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <HD44780_init+0x34>
 194:	00 c0       	rjmp	.+0      	; 0x196 <HD44780_init+0x3a>
 196:	00 00       	nop
 198:	83 e0       	ldi	r24, 0x03	; 3
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <HD44780_write_nibble>
 19e:	81 ee       	ldi	r24, 0xE1	; 225
 1a0:	94 e0       	ldi	r25, 0x04	; 4
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <HD44780_init+0x46>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <HD44780_init+0x4c>
 1a8:	00 00       	nop
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	0e 94 53 00 	call	0xa6	; 0xa6 <HD44780_write_nibble>
 1b0:	81 ee       	ldi	r24, 0xE1	; 225
 1b2:	94 e0       	ldi	r25, 0x04	; 4
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <HD44780_init+0x58>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <HD44780_init+0x5e>
 1ba:	00 00       	nop
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0e 94 53 00 	call	0xa6	; 0xa6 <HD44780_write_nibble>
 1c2:	88 e2       	ldi	r24, 0x28	; 40
 1c4:	0e 94 a6 00 	call	0x14c	; 0x14c <HD44780_command>
 1c8:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 1cc:	88 e0       	ldi	r24, 0x08	; 8
 1ce:	0e 94 a6 00 	call	0x14c	; 0x14c <HD44780_command>
 1d2:	08 95       	ret

000001d4 <HD44780_on>:
 1d4:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 1d8:	98 2f       	mov	r25, r24
 1da:	94 60       	ori	r25, 0x04	; 4
 1dc:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <__data_end>
 1e0:	8c 60       	ori	r24, 0x0C	; 12
 1e2:	0e 94 a6 00 	call	0x14c	; 0x14c <HD44780_command>
 1e6:	08 95       	ret

000001e8 <HD44780_clear>:
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 a6 00 	call	0x14c	; 0x14c <HD44780_command>
 1ee:	83 ed       	ldi	r24, 0xD3	; 211
 1f0:	90 e3       	ldi	r25, 0x30	; 48
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <HD44780_clear+0xa>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <HD44780_clear+0x10>
 1f8:	00 00       	nop
 1fa:	08 95       	ret

000001fc <HD44780_puts>:
}

void HD44780_puts(char *string) {
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
  for (char *it = string; *it; it++) {
 202:	88 81       	ld	r24, Y
 204:	88 23       	and	r24, r24
 206:	31 f0       	breq	.+12     	; 0x214 <HD44780_puts+0x18>
 208:	21 96       	adiw	r28, 0x01	; 1
	//_delay_ms(2);   // seems to be not necessary, but in case something is wrong add it
    HD44780_write(*it);
 20a:	0e 94 aa 00 	call	0x154	; 0x154 <HD44780_write>
  _delay_ms(5);  //todo: test is it necessary
  HD44780_command(HD44780_SETDDRAMADDR | (col + offsets[row]));
}

void HD44780_puts(char *string) {
  for (char *it = string; *it; it++) {
 20e:	89 91       	ld	r24, Y+
 210:	81 11       	cpse	r24, r1
 212:	fb cf       	rjmp	.-10     	; 0x20a <HD44780_puts+0xe>
	//_delay_ms(2);   // seems to be not necessary, but in case something is wrong add it
    HD44780_write(*it);
  }
}
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <main>:
*/

	char *msg = "1234567890ABCDEF";


	HD44780_init();
 21a:	0e 94 ae 00 	call	0x15c	; 0x15c <HD44780_init>
	HD44780_on();
 21e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <HD44780_on>
	HD44780_clear();
 222:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <HD44780_clear>
	HD44780_puts(msg);
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <HD44780_puts>

	LCD_LED_CONFIG;
 22e:	24 9a       	sbi	0x04, 4	; 4
	while (1)
	{
		LCD_LED_SET;
 230:	2c 9a       	sbi	0x05, 4	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 232:	2f ef       	ldi	r18, 0xFF	; 255
 234:	89 e6       	ldi	r24, 0x69	; 105
 236:	98 e1       	ldi	r25, 0x18	; 24
 238:	21 50       	subi	r18, 0x01	; 1
 23a:	80 40       	sbci	r24, 0x00	; 0
 23c:	90 40       	sbci	r25, 0x00	; 0
 23e:	e1 f7       	brne	.-8      	; 0x238 <main+0x1e>
 240:	00 c0       	rjmp	.+0      	; 0x242 <main+0x28>
 242:	00 00       	nop
		_delay_ms(500);
		LCD_LED_RESET;
 244:	2c 98       	cbi	0x05, 4	; 5
 246:	2f ef       	ldi	r18, 0xFF	; 255
 248:	89 e6       	ldi	r24, 0x69	; 105
 24a:	98 e1       	ldi	r25, 0x18	; 24
 24c:	21 50       	subi	r18, 0x01	; 1
 24e:	80 40       	sbci	r24, 0x00	; 0
 250:	90 40       	sbci	r25, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <main+0x32>
 254:	00 c0       	rjmp	.+0      	; 0x256 <main+0x3c>
 256:	00 00       	nop
 258:	eb cf       	rjmp	.-42     	; 0x230 <main+0x16>

0000025a <_exit>:
 25a:	f8 94       	cli

0000025c <__stop_program>:
 25c:	ff cf       	rjmp	.-2      	; 0x25c <__stop_program>
